{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","searchBox.js","Scroll.js","ErrorBoundry.js","AppFather.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","id","style","width","height","name","email","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","AppFather","whenSearchEntered","event","searchField","target","value","fetch","result","json","users","filteredMonsters","filter","monster","toLocaleLowerCase","includes","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCaCQ,EAfF,SAACC,GAIV,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,aAAaC,IAAG,wCAAmCH,EAAMI,GAAzC,aAAwDC,MAAQ,CAACC,MAAM,QAASC,OAAO,WAChH,gCACI,6BAAKP,EAAMQ,OACX,4BAAIR,EAAMS,eCKXC,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,mCAEMA,EAAOC,KAAK,SAACC,EAAMC,GACf,OACI,cAAC,EAAD,CAAcV,GAAIO,EAAOG,GAAGV,GAAII,KAAMG,EAAOG,GAAGN,KAAMC,MAAOE,EAAOG,GAAGL,OAA5DK,SCClBC,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKf,UAAU,MAAf,SACI,uBAAOA,UAAU,mCAAmCgB,KAAK,OAAOC,YAAY,sBAAsBC,SAAUH,OCKzGI,EARA,SAACpB,GACZ,OACI,qBAAKK,MAAO,CAAEgB,UAAW,SAAUC,OAAO,uBAAwBf,OAAQ,SAA1E,SACKP,EAAMuB,YCoBJC,E,kDAtBX,WAAaxB,GAAQ,IAAD,8BAChB,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHE,E,qDAQpB,SAAmBC,EAAOC,GACtBC,KAAKC,SAAU,CAAEJ,UAAU,M,oBAI/B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,oEAEJG,KAAK7B,MAAMuB,a,GAlBCQ,aC8CZC,E,kDArCX,aAAe,IAAD,8BACV,gBAaJC,kBAAoB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACTd,OAAQ,GACRwB,YAAa,IAJP,E,qDAQb,WAAqB,IAAD,OAChBG,MAAM,8CACL7C,MAAK,SAAA8C,GAAM,OAAKA,EAAOC,UACvB/C,MAAK,SAAAgD,GAAK,OAAI,EAAKX,SAAS,CAACnB,OAAQ8B,S,oBAO3C,WAAU,IAAD,OACCC,EAAmBb,KAAKJ,MAAMd,OAAOgC,QAAQ,SAAAC,GAC/C,OAAOA,EAAQpC,KAAKqC,oBAAoBC,SAAS,EAAKrB,MAAMU,YAAYU,wBAE5E,OACI,sBAAK5C,UAAU,KAAf,UACA,mEACA,cAAC,EAAD,CAAWe,aAAca,KAAKI,oBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACG,cAAC,EAAD,CAAUtB,OAAQ+B,e,GA7BVK,IAAMhB,WC0B/BiB,IAASC,OACP,cAAC,IAAMC,WAAP,UAEA,cAAC,EAAD,MAGAC,SAASC,eAAe,SAQ1B9D,M","file":"static/js/main.b600776b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nconst errorVar = false; //this variable has been added only to show what happens when the app encounter error so we have to take this\r\n                         //in consideration and log a error page to the user \r\n\r\nconst Card = (props) => { //destroctory is to type const Card = ({name, email, id}) => {\r\n    if (errorVar ){\r\n        throw new Error ('Nooooooo!!!!');\r\n    }\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\r\n            <img alt='robotPhoto' src={`https://robohash.org/khaoulita${props.id}?set=set2`} style= {{width:'200px', height:'200px'}} />\r\n            <div >\r\n                <h2>{props.name}</h2> \r\n                <p>{props.email}</p> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n //and instead of writing <h2> {props.name}</h2> ===== <h2> {name} </h2> using destroctory method\r\nexport default Card; ","import React from 'react'; \r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <>\r\n          {\r\n              robots.map( (user, i) => {\r\n                  return (\r\n                      <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n                  );\r\n            }\r\n\r\n              )\r\n          }    \r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'; \r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='text' placeholder='Search Monster Name' onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'; \r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'Scroll', border:'5px solid lightgreen', height: '500px'}} >\r\n            {props.children}\r\n        </div>\r\n    ); \r\n}; \r\n\r\nexport default Scroll;  ","import React, {Component} from 'react'; \r\n\r\nclass ErrorBoundry extends Component  {\r\n    constructor (props) {\r\n        super(props); \r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch (error, info){\r\n        this.setState ({ hasError: true})\r\n    }\r\n\r\n\r\n    render (){\r\n        if (this.state.hasError) {\r\n            return <h1> Oooooops something went wrong !!!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundry; ","import React from 'react'; \r\n//if there is in the file of robojInfo more than obj to export and we didn't write default we have to write {robots, cats, ....etc} but in our case their is only one obj we want to export right now \r\nimport CardList from './CardList'; \r\nimport SearchBox from  './searchBox';\r\nimport Scroll from './Scroll'; \r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n\r\n\r\n\r\nclass AppFather  extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n     componentDidMount (){   //it is one of the life steps react do after every refresh of the page so this function call itself by itself \r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(result =>  result.json())\r\n         .then(users => this.setState({robots: users}) )\r\n     }\r\n\r\n    whenSearchEntered = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const filteredMonsters = this.state.robots.filter( monster => {\r\n            return monster.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase())\r\n        } )\r\n        return (\r\n            <div className='tc'>\r\n            <h1>The Strongest Monsters for Fight </h1>\r\n            <SearchBox searchChange={this.whenSearchEntered}/>\r\n            <Scroll>\r\n              <ErrorBoundry>\r\n                 <CardList robots={filteredMonsters} />\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default AppFather;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App'; : we don't need those page and we'll not call them \n// import Hello from './Hello' : we don't need those page and we'll not call them\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \nimport AppFather from './AppFather';\n\n/*\nReactDOM.render(\n  <React.StrictMode>\n   <Hello greeting={ 'whatsapp Ninja' + 27}/>  /the name Should always start with capital letter as here in : Hello\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\n//the previous code was only demostrative on how I can call Hello.js page and Hello.css page you can check them to see how we change and how we call them \n\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <div >\n    <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/> \n    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>  \n    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> \n    </div>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n//the previous code was so much repetitive so if I have 50 element i have to copy past and change the nbr 50 times that's why we will do something faster : \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n  <AppFather />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}